/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Tela;

import dao.CadastroDao;
import modelo.Cadastro;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import javax.swing.table.DefaultTableModel;
import modelo.Cadastro;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import javax.swing.JFrame;


/**
 *
 * @author pedro
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        Tb_dentista.setModel(new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Nome", "CPF", "E-mail", "CEP", "Rua", "Bairro", "Cidade", "UF"
            }
        ));

        // Chama o método para atualizar a tabela
        atualizaTabela(new CadastroDao());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        barPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tb_dentista = new javax.swing.JTable();
        deletar = new javax.swing.JButton();
        alterar = new javax.swing.JButton();
        cadastrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DashBoard");

        barPanel.setBackground(new java.awt.Color(51, 51, 255));
        barPanel.setLayout(new java.awt.BorderLayout());

        Tb_dentista.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tb_dentista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Email", "Cep", "Rua", "Bairro", "UF", "Cidade"
            }
        ));
        Tb_dentista.setToolTipText("");
        Tb_dentista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tb_dentistaMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(Tb_dentista);

        deletar.setText("EXCLUIR");
        deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarActionPerformed(evt);
            }
        });

        alterar.setText("ALTERAR");
        alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarActionPerformed(evt);
            }
        });

        cadastrar.setText("CADASTRAR");
        cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(barPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(261, 261, 261)
                                .addComponent(cadastrar)
                                .addGap(18, 18, 18)
                                .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(barPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(deletar)
                            .addComponent(alterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       CadastroDao cadastroDao = new CadastroDao();
        atualizaDash(cadastroDao);
        atualizaTabela(cadastroDao);
    }//GEN-LAST:event_formWindowOpened

    private void Tb_dentistaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tb_dentistaMouseClicked

    }//GEN-LAST:event_Tb_dentistaMouseClicked

    private void deletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarActionPerformed
    try {
    int linhaSelecionada = Tb_dentista.getSelectedRow(); // resgata o número da linha selecionada na tabela

    if (linhaSelecionada == -1) {
        JOptionPane.showMessageDialog(null, "Selecione um Cadastro para remoção!", "ATENÇÃO!", WARNING_MESSAGE);
    } else {
        // Obtém o ID diretamente da tabela
        String idString = Tb_dentista.getValueAt(linhaSelecionada, 0).toString();

        // Converte a String para int
        try {
            int idParaRemover = Integer.parseInt(idString);

            // Pergunta de confirmação antes de excluir o registro
            int opcao = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja remover?");

            // Se for igual a 0 significa que clicou em SIM
            if (opcao == 0) {
                CadastroDao cadastroDao = new CadastroDao();
                // Chama o método excluirID passando o identificador do registro selecionado anteriormente
                cadastroDao.excluirID(idParaRemover);

                atualizaTabela(cadastroDao);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "O valor da coluna de ID não é um número válido!", "ERRO!", ERROR_MESSAGE);
        }
    }
} catch (Exception ex) {
    JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
}

    }//GEN-LAST:event_deletarActionPerformed

    private void alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarActionPerformed
        Cadastro cadastro = new Cadastro();
           cadastro.setIdCad(Integer.parseInt(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(), 0).toString()));
           cadastro.setNomeCad(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),1).toString());
           cadastro.setCpf(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),2).toString());
           cadastro.setEmail(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(), 3).toString());
           cadastro.setCep(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),4).toString());
           cadastro.setRua(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),5).toString());
           cadastro.setBairro(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),6).toString());
           cadastro.setCidade(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),7).toString());
           cadastro.setUf(Tb_dentista.getValueAt(Tb_dentista.getSelectedRow(),8).toString());
           
           Caddentista frmCad = new Caddentista();
           frmCad.exportarDados(cadastro);
           frmCad.setVisible(true);
    }//GEN-LAST:event_alterarActionPerformed

    private void cadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarActionPerformed
                                                  
    // Crie uma instância do JFrame Caddentista
    Caddentista caddentistaFrame = new Caddentista();

    // Defina a operação padrão de fechar para "dispose" (liberar recursos)
    caddentistaFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    // Tornar o JFrame Caddentista visível
    caddentistaFrame.setVisible(true);

    }//GEN-LAST:event_cadastrarActionPerformed

    private void limparTabela() {
        //percorre a tabela e exclui todas as linhas
        while (Tb_dentista.getRowCount() > 0) {
            DefaultTableModel dm = (DefaultTableModel) Tb_dentista.getModel();
            dm.getDataVector().removeAllElements();
        }
    }
    
    private void atualizaTabela(CadastroDao cadastroDao) {
        try {

            limparTabela();

            ArrayList<Cadastro> listaCadastros;
            listaCadastros = cadastroDao.consultar(); //consulta todos os registros da tabela Escola

            //Resgata o modelo da tabela            
            DefaultTableModel modeloTabela = (DefaultTableModel) Tb_dentista.getModel();

            for (Cadastro cadastro : listaCadastros) {

                modeloTabela.addRow(new String[]{
                    Integer.toString(cadastro.getIdCad()),
                    cadastro.getNomecad(),
                    cadastro.getCpf(),
                    cadastro.getEmail(),
                    cadastro.getCep(),
                    cadastro.getRua(),
                    cadastro.getBairro(),
                    cadastro.getCidade(),
                    cadastro.getUf(),
                });
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
        }
    }
    
    
    private void atualizaDash(CadastroDao cadastroDao)
    {
        new Thread(){
           @Override public void run(){
              while (true){
                try
                {

                    ArrayList<Cadastro> listaCadastros;
                    listaCadastros = cadastroDao.dashboard(); 
                    
                    DefaultCategoryDataset barChartData = new DefaultCategoryDataset();
                    
                    DefaultPieDataset pizzaChartData = new DefaultPieDataset();
                    
                    for(Cadastro cadastro : listaCadastros)
                    {

                         

                        // Adiciona dados ao gráfico de barras
                         barChartData.setValue(cadastro.getTotalCadastros(), "Núm Cadastros", "Núm Cadastros");



                    }
                    //Gráfico em barras
                    JFreeChart barChart = ChartFactory.createBarChart("Ex Barras", "Dados", "Valores", barChartData, 
                            PlotOrientation.VERTICAL, true, true, false);
                    CategoryPlot barchrt = barChart.getCategoryPlot();
                    barchrt.setRangeGridlinePaint(new Color(140,105,204));
                    ChartPanel ChartP = new ChartPanel(barChart);
                    barPanel.removeAll();
                    barPanel.add(ChartP,BorderLayout.CENTER);
                    barPanel.validate();

                    //Gráfico em pizza
                    JFreeChart pizzaChart = ChartFactory.createPieChart("Ex: Pizza", pizzaChartData);
                    PiePlot pizzachrt = (PiePlot)pizzaChart.getPlot();
                    ChartPanel ChartPizza = new ChartPanel(pizzaChart);


                    
                    Thread.sleep(500);

                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                }
              }   
           }
        }.start();   
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tb_dentista;
    private javax.swing.JButton alterar;
    private javax.swing.JPanel barPanel;
    private javax.swing.JButton cadastrar;
    private javax.swing.JButton deletar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
